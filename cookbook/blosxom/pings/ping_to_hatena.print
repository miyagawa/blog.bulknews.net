<html>
<head>
<title>Blog Developer's Cookbook : Weblogs.com Ping Gateway to はてなアンテナ</title>
<link rel="stylesheet" type="text/css" href="/cookbook/print.css" />
</head>
<body>
Published on <a href="http://blog.bulknews.net/cookbook/blosxom">Blog Developer's Cookbook</a>.<br />
Printer friendly version of <a href="http://blog.bulknews.net/cookbook/blosxom/pings/ping_to_hatena.html">http://blog.bulknews.net/cookbook/blosxom/pings/ping_to_hatena.html</a>.
<br /><br /><br />

<h2>Weblogs.com Ping Gateway to はてなアンテナ</h2>
by miyagawa at Thu, 09 Oct 2003 05:29
<p />

<p />
<a href="http://www.movabletype.org/">Movable Type</a> などの Blog ツールは、<a href="http://weblogs.com/">Weblogs.Com</a> などの <strong>Ping Server</strong> に更新を通知する機能を持っています。この更新通知は、<a href="http://newhome.weblogs.com/directory/11">Weblogs.Com Ping Specs</a> にあるような XML-RPC の API を通じて行われており、日本では <a href="http://ping.bloggers.jp/">ping.bloggers.jp</a> や <a href="http://myblog.jp/">MyBlog Japan</a> などがこの XML-RPC Server の仕様を実装しています。
<p />
今回のレシピでは、この Ping Server を実装して、受けとった Ping を <a href="http://a.hatena.ne.jp/">はてなアンテナ</a> に更新通知するプロキシをつくってみます。
<hr class="seemore">


<p />
Weblogs.Com の XML-RPC Ping Spec は <a href="http://www.xmlrpc.com/weblogsCom">xmlrpc.com</a> で解説されています<a href="#note-1">(*1)</a> 。
<p><blockquote class="inlineRaw">weblogUpdates.ping (weblogname, weblogurl) returns struct <br />
<br />
To tell Weblogs.Com that a weblog has changed, call weblogUpdates.ping on rpc.weblogs.com, port 80, path /RPC2.<br />
<br />
It takes two parameters, both strings. The first is the name of the weblog, the second is its URL.<br />
<br />
We read the weblog to determine if it has changed, therefore the weblog must already be updated when you call weblogUpdates.ping.<br />
<br />
It returns a struct that indicates success or failure. It has two elements, flerror and message. If flerror is false, it worked. If it's true, message contains an English-language description of the reason for the failure.<br />
</blockquote></p>

ここで最初に記述されている <code class="inlineRaw">rpc.weblogs.com, port 80, path /RPC2</code> は Weblogs.Com で使用している URI で、実際にはMTなどのツールでは設定項目で変更することができるため、これは任意の通知先 URL となります。
<p />
それ以外を整理すると、
<table class="blosxomTable" cellspacing="1" border="0">
<tr class="blosxomTableRow"><td class="blosxomTableDataLeft">メソッド名</td><td class="blosxomTableDataRight">weblogUpdates.ping</td></tr>
<tr class="blosxomTableRow"><td class="blosxomTableDataLeft">引数</td><td class="blosxomTableDataRight">(String weblogname, String weblogurl)</td></tr>
<tr class="blosxomTableRow"><td class="blosxomTableDataLeft">返り値</td><td class="blosxomTableDataRight">struct { Boolean flerror, String message }</td></tr>
</table>

のような XML-RPC API となります。
<p />

<h2>サンプルコード</h2>

Perl で XML-RPC のクライアントやサーバを記述するには、SOAP のツールキットである <a href="http://search.cpan.org/search?m=module&q=SOAP%3a%3aLite">SOAP::Lite</a> にバンドルされている XMLRPC::Lite モジュールを使用するのが簡単です <a href="#note-2">(*2)</a>。ここでは CGI スクリプトによってXML-RPCのエンドポイントをつくることができる <a href="http://search.cpan.org/search?m=module&q=XMLRPC%3a%3aTransport%3a%3aHTTP">XMLRPC::Transport::HTTP</a> を使用します。作成したスクリプトは  <a href="#listing-1">List 1</a> のようになります。
<p />

<pre class="scriptsSnippet">my $server = XMLRPC::Transport::HTTP::CGI
    -&gt;dispatch_to('weblogUpdates')
    -&gt;handle;
</pre>

ここでは、XMLRPC::Transport::HTTP::CGI から dispatch_to メソッドを呼び出して、weblogUpdates パッケージのメソッドに dispatch するよう設定しています。これで、<code class="inlineRaw">weblogUpdates.ping</code> のメソッドを処理することができるようになります。実際に XML-RPC クライアントからリクエストが来ると、<code class="inlineRaw">weblogUpdates-&gt;ping(@args);</code> のようにクラスメソッドで API がコールされます。よって weblogUpdates パッケージ に ping というクラスメソッドを用意すればよいことになります。これは別のモジュール等で実装して呼び出すのが一般的ですが、今回のスクリプトでは、ゲートウェイとなるスクリプトにインラインでメソッドを記述する形にしました。
<p />
<pre class="scriptsSnippet">package weblogUpdates;

use LWP::Simple;
use URI::Escape;

my $HatenaURL;
BEGIN { $HatenaURL = &quot;http://a.hatena.ne.jp/check?url=%s&quot;; }

sub ping {
    my($class, $blog_name, $blog_url) = @_;
    my $api_url = sprintf $HatenaURL, uri_escape($blog_url);
    if (LWP::Simple::get($api_url)) {
        return { flerror =&gt; XMLRPC::Data-&gt;type(boolean =&gt; 0) };
    } else {
        return { flerror =&gt; XMLRPC::Data-&gt;type(boolean =&gt; 1),
                 message =&gt; &quot;request failed.&quot; };
    }
}
</pre>

引数に $blog_name, $blog_url を受けとり、はてなアンテナの更新通知URLを生成<a href="#note-3">(*3)</a>、<a href="http://search.cpan.org/search?m=module&q=LWP%3a%3aSimple">LWP::Simple</a> モジュールでリクエストを送信しています。
<p />

はてなアンテナの更新通知については、<a href="http://a.hatena.ne.jp/check">http://a.hatena.ne.jp/check</a> に記述がある API を使用しました。
<p><blockquote class="inlineRaw">更新通知用APIについて<br />
※このページをはてなアンテナに対して能動的に更新を通知するためのAPIとして公開します。お使いの掲示板CGIなどで、ページ更新時にアクセスして頂くことで迅速な更新の反映が可能となります。 <br />
※アクセスURL http://a.hatena.ne.jp/check?url=チェックしたいページのエンコード済みURL <br />
</blockquote></p>

本来であれば、はてなの更新通知 API の返り値をチェックすべきですが、現状では HTML をパースする以外にエラーかどうかを調べる方法はない<a href="#note-4">(*4)</a> ようですので、ここではコンテンツが返ってくるかどうかのチェックだけとしています<a href="#note-5">(*5)</a>。返り値として、struct (= Perl ではハッシュリファレンス) を返しています。返り値の boolean 値をつくるためには XMLRPC::Data をつかって明示的に boolean 値を作成します。成功の場合は flerror を false (0) で返し、失敗であれば flerror を true (1), message にエラー文字列を入れて return しています。
<p />
 
このスクリプト (ping_to_hatena) を CGI として動作させる URL (たとえば http://blog.example.com/ping_to_hatena) に設置し、Blog の Ping 通知先にその URL を記述すれば、Blog の更新をはてなアンテナに即座に反映させることができるというわけです。


<h2>Listings</h2>
<div class="scriptsListings"><a name="listing-1"><span class="scripsListingHeader">List 1: ping_to_hatena.pl</span></a>
<pre class="scriptsListing">#!/usr/local/bin/perl -w
# ping_to_hatena - Weblogs.Com Ping Server Gateway to Hatena Antenna

use strict;
use XMLRPC::Transport::HTTP;

my $server = XMLRPC::Transport::HTTP::CGI
    -&gt;dispatch_to('weblogUpdates')
    -&gt;handle;

package weblogUpdates;

use LWP::Simple;
use URI::Escape;

my $HatenaURL;
BEGIN { $HatenaURL = &quot;http://a.hatena.ne.jp/check?url=%s&quot;; }

sub ping {
    my($class, $blog_name, $blog_url) = @_;
    my $api_url = sprintf $HatenaURL, uri_escape($blog_url);
    if (LWP::Simple::get($api_url)) {
        return { flerror =&gt; XMLRPC::Data-&gt;type(boolean =&gt; 0) };
    } else {
        return { flerror =&gt; XMLRPC::Data-&gt;type(boolean =&gt; 1),
                 message =&gt; &quot;request failed.&quot; };
    }
}
</pre>
</div>
<div class="footnote"><a href="#note-1" name="note-1">*1)</a> 実際には Weblogs.Com には SOAP や REST (HTML Form) のサービス実装も用意されていますが、各種 Blog ツールが通知として利用しているのは XML-RPC のものです。<br />
<a href="#note-2" name="note-2">*2)</a> 実際 XMLRPC::Lite は SOAP::Lite のサブクラスとして実装されています。<br />
<a href="#note-3" name="note-3">*3)</a> URI::Escape で URL エンコードを忘れずに!<br />
<a href="#note-4" name="note-4">*4)</a> やるのであれば、HTMLに対して正規表現で <code>/ご指定のページはアンテナに登録されていません/</code> にマッチさせるのが簡単かもしれません。<br />
<a href="#note-5" name="note-5">*5)</a> たとえば a.hatena.ne.jp にアクセスできない場合や、500 Internal Server Error を返す場合などにエラーとなります<br />
</div>


<p />
Copyright&copy;2002-2003 <b><a href="http://blog.bulknews.net/cookbook/blosxom">Tatsuhiko Miyagawa</a></b>
</body></html>