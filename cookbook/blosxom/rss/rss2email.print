<html>
<head>
<title>Blog Developer's Cookbook : RSS をメールで送信する</title>
<link rel="stylesheet" type="text/css" href="/cookbook/print.css" />
</head>
<body>
Published on <a href="http://blog.bulknews.net/cookbook/blosxom">Blog Developer's Cookbook</a>.<br />
Printer friendly version of <a href="http://blog.bulknews.net/cookbook/blosxom/rss/rss2email.html">http://blog.bulknews.net/cookbook/blosxom/rss/rss2email.html</a>.
<br /><br /><br />

<h2>RSS をメールで送信する</h2>
by miyagawa at Thu, 23 Oct 2003 22:29
<p />

<p />

RSS は Aggregator で読んだり、自分の Blog に張りつけたりと、様々な使用法がありますが、トラディショナルに、お気に入りの MUA (メーラ) で RSS の更新情報をメールで受信したいという欲求もあるでしょう。今回は、RSS を取得して Email で送信するスクリプトをつくってみます。
<hr class="seemore">



<h2>RSS のパース</h2>

RSS のパース処理には、<a href="http://blog.bulknews.net/cookbook/blosxom/rss/kanshin_rss.print">RSS の作成</a> でも使用した <a href="http://search.cpan.org/search?m=module&q=XML%3a%3aRSS">XML::RSS</a> を使用します。XML::RSS は XML::Parser のサブクラスであるため、RSS の文字列を変数やファイルに保存した後、
<p><pre class="inlineRaw">my $rss = XML::RSS-&gt;new();
$rss-&gt;parse($doc);
$rss-&gt;parsefile($file);
</pre></p>

などとしてパースを行わせることができます。パースした RSS の情報は、<code>channel</code> や <code>items</code> などのハッシュから取得できます。

<h2>DublinCore: メタデータ</h2>

今回作成するスクリプトは、定期的に指定した URL の RSS を取得して、更新情報があったら、設定したメールアドレスに Email を送信するものです。この「更新された時刻」を取得するために、RSS の DublinCore モジュールを使用して判定することにします。

<p />
<a href="http://blog.bulknews.net/cookbook/blosxom/rss/kanshin_rss.print">関心空間の RSS を作成する</a> では、RSS 0.91 の RSS を作成していたため、出力された RSS を見ただけでは、それぞれのアイテムの更新日付がわかりません。更新情報を取得して差分で何か処理するような場合にはこれでは不便です。そこで RSS 1.0 や RSS 2.0 では、モジュールを使用して、更新時刻などのコアには含まれないメタデータを RSS に含めることができます。

<p />
ここでは、名前空間 dc <a href="#note-1">(*1)</a> で定義される DublinCore モジュールを使用します。Dublin Core は、ウェブ上のセマンティックなデータの基礎として定義されたメタデータで、<a href="http://dublincore.org/">Dublin Core Metadata Initiative</a> により策定されています。Dublin Core には Title や Creator 等、様々なデータがありますが、今回はそのうち日付を表わす Date を使用します。
<p />

<h2>サンプルコード</h2>

RSS を取得し、更新情報をメール送信するスクリプトは <a href="#listing-1">List 1</a> のようになります。

<p />
<pre class="scriptsSnippet">use Digest::MD5 qw(md5_hex);
use Encode;
use File::stat;
use HTTP::Date;
use LWP::Simple;
use MIME::Lite;
use XML::RSS;
</pre>

スクリプトで使用するモジュールをロードします。今回は定番の <a href="http://search.cpan.org/search?m=module&q=LWP%3a%3aSimple">LWP::Simple</a>, <a href="http://search.cpan.org/search?m=module&q=XML%3a%3aRSS">XML::RSS</a> に加えて、MD5 ダイジェストを作成する <a href="http://search.cpan.org/search?m=module&q=Digest%3a%3aMD5">Digest::MD5</a>、エンコーディングの相互変換 <a href="http://search.cpan.org/search?m=module&q=Encode">Encode</a>、ファイルの stat をオブジェクト指向で行う <a href="http://search.cpan.org/search?m=module&q=File%3a%3astat">File::stat</a>、ISO 形式や RFC822 形式の日付文字列を扱う <a href="http://search.cpan.org/search?m=module&q=HTTP%3a%3aDate">HTTP::Date</a>、メール送信のための <a href="http://search.cpan.org/search?m=module&q=MIME%3a%3aLite">MIME::Lite</a> といったモジュールを使用します。

<p />
<pre class="scriptsSnippet">our $CacheDir = &quot;rsscache&quot;;
our $MailTo   = 'you@example.com';
</pre>

設定変数を our で定義しています。<code>$CacheDir</code> は RSS ファイルのキャッシュを保存するディレクトリ、<code>$MailTo</code> は更新情報を送信するメールアドレスを指定します。

<p />
<pre class="scriptsSnippet">mkdir $CacheDir, 0755 unless -e $CacheDir;
</pre>

キャッシュ用のディレクトリがなければ、mkdir します。

<p />
<pre class="scriptsSnippet">my $rss    = shift or die &quot;Usage: rss2email URL\n&quot;;
my $digest = md5_hex($rss);
my $cache  = &quot;$CacheDir/$digest.xml&quot;;
</pre>

コマンドライン引数に RSS の URL を指定します。この URL の MD5 ダイジェストをとり、この hex 値をキャッシュファイル名とします。ダイジェストなので不可逆となってしまうのが欠点ですが、URL → キャッシュへの一方向変換でユニーク性が保証されれば OK なので、MD5 を利用するのがよいでしょう。

<p />
<pre class="scriptsSnippet">my $lastmod = -e $cache ? stat($cache)-&gt;mtime : 0;
my $status = LWP::Simple::mirror($rss, $cache);
</pre>

キャッシュファイルが存在する場合は、あらかじめ更新時刻を <code>stat</code> しておきます。次に <code>LWP::Simple::mirror</code> を呼び出します。この関数は LWP::UserAgent の <code>mirror</code> メソッドへのラッパーとなっており、キャッシュファイルの mtime を見て If-Modified-Since のヘッダをつけて投げるなどの処理を透過的に行ってくれます。また、受信したレスポンスはキャッシュファイルに更新されます。

<p />
<pre class="scriptsSnippet">if ($status == RC_NOT_MODIFIED) {
    warn &quot;$rss not modified\n&quot;;
} elsif (is_error($status)) {
    die &quot;$rss not found!\n&quot;;
} elsif (is_success($status)) {
    proc_rss($cache, $lastmod);
}
</pre>

mirror の返り値によって処理を分岐します。<code>RC_NOT_MODIFIED</code> では、304 レスポンスが返ってきているため、RSS ファイル自体が更新されていませんから、新着記事が届いているということもありません。レスポンスが失敗の場合(<code>is_error</code>)は、エラー終了します。リクエストが成功した場合(<code>is_success</code>)は、RSS ファイルの中身について処理を行います。

<p />
<pre class="scriptsSnippet">sub proc_rss {
    my($xml, $lastmod) = @_;
    my $rss = XML::RSS-&gt;new();
    $rss-&gt;parsefile($xml);
</pre>

XML::RSS オブジェクトを生成し、<code>parsefile</code> メソッドを実行します。

<p />
<pre class="scriptsSnippet">    for my $item (@{$rss-&gt;{items}}) {
        my $dc_date = $item-&gt;{dc}-&gt;{date}
            or die &quot;RSS should have dc:date element&quot;;
        my $epoch = HTTP::Date::str2time($dc_date);
        if ($epoch &gt; $lastmod) {
            do_sendmail($rss, $item, $epoch);
        } else {
            last;
        }
    }
</pre>

それぞれの RSS アイテムについて、Dublin Core の日付属性である <code>dc:date</code> を探します。XML::RSS では、モジュールで拡張した属性は、XML namespace のハッシュリファレンスに保存されています。ここで Dublin Core の名前空間は <code>dc</code> であるため、<code class="inlineRaw">$item-&gt;{dc}-&gt;{date}</code> で <code>dc:date</code> の値が取得できます。今回のスクリプトでは、この <code>dc:date</code> を出力しない RSS (RSS 0.91 など) は対象外として例外を投げています。

<p />
Dublin Core の date 文字列は、ISO 8601 のサブセットである W3CDTF フォーマット<a href="#note-2">(*2)</a> で表記されているため、これをパースします。今回は HTTP::Date モジュールがうまく処理できるようなので、これを使用していますが、<a href="http://search.cpan.org/search?m=module&q=Date%3a%3aParse">Date::Parse</a> モジュール、また <a href="http://search.cpan.org/search?m=module&q=DateTime%3a%3aFormat%3a%3aW3CDTF">DateTime::Format::W3CDTF</a> でも処理できるようです<a href="#note-3">(*3)</a>。POSIX の <code>strptime</code> などを使用してもパースすることは可能ですが、サイトやツールごとに表記の揺れが激しかったりして大変なので、こうしたモジュールを使用する方がベターでしょう。

<p />
パースした結果、もともとのキャッシュファイルの更新時刻 <code>$lastmod</code> より新しいエントリについては、<code>do_sendmail</code> でメールを送信します<a href="#note-4">(*4)</a>。キャッシュの mtime より古いエントリが登場したら、ループを抜けています。これは通常 RSS ファイルのエントリは新着順であるという慣習によっていますが、そうでない場合もありそうですので、<code>last</code> を <code>next</code> にした方がよいかもしれません。

<p />
<pre class="scriptsSnippet">sub do_sendmail {
    my($rss, $item, $epoch) = @_;
    my $body = &lt;&lt;BODY;
New entry arrived for $rss-&gt;{channel}-&gt;{title}
$item-&gt;{link}
&gt;&gt; $item-&gt;{description}
BODY
    ;
</pre>

RSS のアイテム内容をメールで送信します。本文には <code>channel</code> の <code>title</code> 要素と、各 <code>item</code> の <code>link</code>, <code>description</code> 要素を使用しています。

<p />
<pre class="scriptsSnippet">    my $mime = MIME::Lite-&gt;new(
        From =&gt; $MailTo,
        To   =&gt; $MailTo,
        Subject =&gt; encode('MIME-Header' =&gt; $item-&gt;{title}),
        Type =&gt; 'text/plain; charset=UTF-8',
        Encoding =&gt; '8bit',
        Data =&gt; encode('UTF-8' =&gt; $body),
        Datestamp =&gt; 0,
        Date =&gt; HTTP::Date::time2str($epoch),
    );
</pre>
メール送信には MIME::Lite モジュールを使用しました。日本語などを扱うときに問題になるのがエンコーディングですが、ここでは Subject は UTF-8 + B エンコード、本文も UTF-8 として送信するようにしました。近頃の MUA であれば UTF-8 でも問題なく読めますから問題は少ないでしょう。どうしても無理な場合は ISO-2022-JP などに変更する必要があります。

<p />
またちょっとしたことですが、RSS 内の <code>dc:date</code> で設定してある日付が、メールの Date: ヘッダにつくよう、Datestamp と Date も設定してあります。

<p />
<pre class="scriptsSnippet">    $mime-&gt;send();
</pre>

最後に <code>send</code> メソッドでメールを送信します。MIME::Lite はプラットフォーム毎に最適な方法で、メールを送信します<a href="#note-5">(*5)</a>。

<h2>実行例</h2>

コマンドラインから RSS 1.0 や RSS 2.0 の URL を指定します。

<p><pre class="command">% <strong>./rss2email.pl http://blog.bulknews.net/cookbook/blosxom/index.rss10</strong>
</pre></p>

うまくいけば、RSS のエントリが1通ずつ、メールで送信されてきます。また
<code>rsscache</code> というディレクトリが作成され、その中にキャッシュの RSS ファイルが出来ていることも確認できるでしょう。

<h2>See Also</h2>
<ul>
<li><a href="http://www2u.biglobe.ne.jp/%7Ekyo-n/blog/blosxom.cgi">HAIL 2 U!</a> の kyo 氏による <a href="http://www2u.biglobe.ne.jp/~kyo-n/rss/#perlscript">RSS Headline Mailer</a> も同様に、RSS を取得して メールを送信するスクリプトです。複数の RSS URL などにも対応しています。</li>
</ul>

<h2>Listings</h2>
<div class="scriptsListings"><a name="listing-1"><span class="scripsListingHeader">List 1: rss2email.pl</span></a>
<pre class="scriptsListing">#!/usr/local/bin/perl -w
# rss2email - send email from RSS feed

use strict;
use Digest::MD5 qw(md5_hex);
use Encode;
use File::stat;
use HTTP::Date;
use LWP::Simple;
use MIME::Lite;
use XML::RSS;

our $CacheDir = &quot;rsscache&quot;;
our $MailTo   = 'you@example.com';

mkdir $CacheDir, 0755 unless -e $CacheDir;

my $rss    = shift or die &quot;Usage: rss2email URL\n&quot;;
my $digest = md5_hex($rss);
my $cache  = &quot;$CacheDir/$digest.xml&quot;;

my $lastmod = -e $cache ? stat($cache)-&gt;mtime : 0;
my $status = LWP::Simple::mirror($rss, $cache);

if ($status == RC_NOT_MODIFIED) {
    warn &quot;$rss not modified\n&quot;;
} elsif (is_error($status)) {
    die &quot;$rss not found!\n&quot;;
} elsif (is_success($status)) {
    proc_rss($cache, $lastmod);
}

sub proc_rss {
    my($xml, $lastmod) = @_;
    my $rss = XML::RSS-&gt;new();
    $rss-&gt;parsefile($xml);

    for my $item (@{$rss-&gt;{items}}) {
        my $dc_date = $item-&gt;{dc}-&gt;{date}
            or die &quot;RSS should have dc:date element&quot;;
        my $epoch = HTTP::Date::str2time($dc_date);
        if ($epoch &gt; $lastmod) {
            do_sendmail($rss, $item, $epoch);
        } else {
            last;
        }
    }
}

sub do_sendmail {
    my($rss, $item, $epoch) = @_;
    my $body = &lt;&lt;BODY;
New entry arrived for $rss-&gt;{channel}-&gt;{title}
$item-&gt;{link}
&gt;&gt; $item-&gt;{description}
BODY
    ;
    my $mime = MIME::Lite-&gt;new(
        From =&gt; $MailTo,
        To   =&gt; $MailTo,
        Subject =&gt; encode('MIME-Header' =&gt; $item-&gt;{title}),
        Type =&gt; 'text/plain; charset=UTF-8',
        Encoding =&gt; '8bit',
        Data =&gt; encode('UTF-8' =&gt; $body),
        Datestamp =&gt; 0,
        Date =&gt; HTTP::Date::time2str($epoch),
    );
    $mime-&gt;send();
}
</pre>
</div>
<div class="footnote"><a href="#note-1" name="note-1">*1)</a> http://purl.org/dc/elements/1.1/<br />
<a href="#note-2" name="note-2">*2)</a> 2003-10-23T03:21:11+09:00 のようなフォーマット<br />
<a href="#note-3" name="note-3">*3)</a> <a href="http://naoya.dyndns.org/">NDO::Weblog</a> の naoya 氏に教えてもらいました。情報thanks!<br />
<a href="#note-4" name="note-4">*4)</a> Blog ツールの Draft 機能などを使用した場合、前回の更新より前の時刻のエントリが新しくポストされることがあります。今回のスクリプトでは、そのような場合は拾うことができません。<br />
<a href="#note-5" name="note-5">*5)</a> Unix なら sendmail コマンド、Win32 なら SMTP を使用<br />
</div>


<p />
Copyright&copy;2002-2003 <b><a href="http://blog.bulknews.net/cookbook/blosxom">Tatsuhiko Miyagawa</a></b>
</body></html>